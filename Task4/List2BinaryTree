package util;

/**
 * Implementation of BinaryTree from LinkedList
 *
 * @author Amna Ghori
 */
import java.util.LinkedList;

public class List2BinaryTree {

    private Node root;

    // Method to insert given list into binary tree nodes
    public Node insertList2BT(LinkedList<Integer> list, Node root, int i) {
        if (i < list.size()) {
            Node temp = new Node(list.get(i));
            root = temp;

            // Inserting left child
            root.setLeft(insertList2BT(list, root.getLeft(), 2 * i + 1));

            // Inserting right child
            root.setRight(insertList2BT(list, root.getRight(), 2 * i + 2));
        }
        return root;
    }

    // Method to print nodes by using inorder traversing of tree
    public void inOrderTraversal(Node root) {
        if (root != null) {
            inOrderTraversal(root.getLeft());
            System.out.print(root.getData() + " ");
            inOrderTraversal(root.getRight());
        }
    }

    // Method to print nodes by using inorder traversing of tree
    public void preOrderTraversal(Node root) {
        if (root != null) {
            System.out.print(root.getData() + " ");
            preOrderTraversal(root.getLeft());
            preOrderTraversal(root.getRight());
        }
    }

    // Method to print nodes by using inorder traversing of tree
    public void postOrderTraversal(Node root) {
        if (root != null) {
            postOrderTraversal(root.getLeft());
            postOrderTraversal(root.getRight());
            System.out.print(root.getData() + " ");
        }
    }

    public int height(Node root) {
        if (root == null) {
            return 0;
        } else {
            // compute  height of each subtree 
            int lheight = height(root.getLeft());
            int rheight = height(root.getRight());

            // comaparing heights of subtrees and use the larger one 
            if (lheight > rheight) {
                return (lheight + 1);
            } else {
                return (rheight + 1);
            }
        }
    }

    // recursive method to print nodes of binary tree in level order
    public void printTree(Node root) {
        int h = height(root);
        for (int i = 0; i < h; i++) {
            printTree(root, i);
            System.out.println();
        }
    }

    public void printTree(Node root, int level) {
        if (root == null) {
            return;
        }
        if (level == 0) {
            System.out.print(root.getData() + "  ");
        } else if (level > 0) {
            printTree(root.getLeft(), level - 1);
            printTree(root.getRight(), level - 1);
        }
    }

    // Getter and setter
    public Node getRoot() {
        return root;
    }

    public void setRoot(Node root) {
        this.root = root;
    }
}

//    1 2 3 4 5 6 7
//                1
//            2       3
//         4    5   6   7
